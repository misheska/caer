// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_POLARITY_DV_H_
#define FLATBUFFERS_GENERATED_POLARITY_DV_H_

#include "cvector.hpp"
#include "flatbuffers/flatbuffers.h"

namespace dv {

struct PolarityEvent;

struct PolarityPacket;
struct PolarityPacketT;

inline const flatbuffers::TypeTable *PolarityEventTypeTable();

inline const flatbuffers::TypeTable *PolarityPacketTypeTable();

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PolarityEvent FLATBUFFERS_FINAL_CLASS {
private:
	int64_t timestamp_;
	int16_t addressX_;
	int16_t addressY_;
	uint8_t polarity_;
	int8_t padding0__;
	int16_t padding1__;

public:
	PolarityEvent() {
		memset(static_cast<void *>(this), 0, sizeof(PolarityEvent));
	}
	PolarityEvent(int64_t _timestamp, int16_t _addressX, int16_t _addressY, bool _polarity) :
		timestamp_(flatbuffers::EndianScalar(_timestamp)),
		addressX_(flatbuffers::EndianScalar(_addressX)),
		addressY_(flatbuffers::EndianScalar(_addressY)),
		polarity_(flatbuffers::EndianScalar(static_cast<uint8_t>(_polarity))),
		padding0__(0),
		padding1__(0) {
		(void) padding0__;
		(void) padding1__;
	}
	int64_t timestamp() const {
		return flatbuffers::EndianScalar(timestamp_);
	}
	int16_t addressX() const {
		return flatbuffers::EndianScalar(addressX_);
	}
	int16_t addressY() const {
		return flatbuffers::EndianScalar(addressY_);
	}
	bool polarity() const {
		return flatbuffers::EndianScalar(polarity_) != 0;
	}
};
FLATBUFFERS_STRUCT_END(PolarityEvent, 16);

struct PolarityPacketT : public flatbuffers::NativeTable {
	typedef PolarityPacket TableType;
	dv::cvector<PolarityEvent> events;
	PolarityPacketT() {
	}
};

struct PolarityPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef PolarityPacketT NativeTableType;
	static const char *identifier;
	static const flatbuffers::TypeTable *MiniReflectTypeTable() {
		return PolarityPacketTypeTable();
	}
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE { VT_EVENTS = 4 };
	const flatbuffers::Vector<const PolarityEvent *> *events() const {
		return GetPointer<const flatbuffers::Vector<const PolarityEvent *> *>(VT_EVENTS);
	}
	bool Verify(flatbuffers::Verifier &verifier) const {
		return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_EVENTS) && verifier.VerifyVector(events())
			   && verifier.EndTable();
	}
	PolarityPacketT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
	void UnPackTo(PolarityPacketT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
	static void UnPackToFrom(
		PolarityPacketT *_o, const PolarityPacket *_fb, const flatbuffers::resolver_function_t *_resolver = nullptr);
	static flatbuffers::Offset<PolarityPacket> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PolarityPacketT *_o,
		const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PolarityPacketBuilder {
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_events(flatbuffers::Offset<flatbuffers::Vector<const PolarityEvent *>> events) {
		fbb_.AddOffset(PolarityPacket::VT_EVENTS, events);
	}
	explicit PolarityPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
		start_ = fbb_.StartTable();
	}
	PolarityPacketBuilder &operator=(const PolarityPacketBuilder &);
	flatbuffers::Offset<PolarityPacket> Finish() {
		const auto end = fbb_.EndTable(start_);
		auto o         = flatbuffers::Offset<PolarityPacket>(end);
		return o;
	}
};

inline flatbuffers::Offset<PolarityPacket> CreatePolarityPacket(
	flatbuffers::FlatBufferBuilder &_fbb, flatbuffers::Offset<flatbuffers::Vector<const PolarityEvent *>> events = 0) {
	PolarityPacketBuilder builder_(_fbb);
	builder_.add_events(events);
	return builder_.Finish();
}

inline flatbuffers::Offset<PolarityPacket> CreatePolarityPacketDirect(
	flatbuffers::FlatBufferBuilder &_fbb, const std::vector<PolarityEvent> *events = nullptr) {
	auto events__ = events ? _fbb.CreateVectorOfStructs<PolarityEvent>(*events) : 0;
	return dv::CreatePolarityPacket(_fbb, events__);
}

flatbuffers::Offset<PolarityPacket> CreatePolarityPacket(flatbuffers::FlatBufferBuilder &_fbb,
	const PolarityPacketT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PolarityPacketT *PolarityPacket::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
	auto _o = new PolarityPacketT();
	UnPackTo(_o, _resolver);
	return _o;
}

inline void PolarityPacket::UnPackTo(PolarityPacketT *_o, const flatbuffers::resolver_function_t *_resolver) const {
	(void) _o;
	(void) _resolver;
	UnPackToFrom(_o, this, _resolver);
}

inline void PolarityPacket::UnPackToFrom(
	PolarityPacketT *_o, const PolarityPacket *_fb, const flatbuffers::resolver_function_t *_resolver) {
	(void) _o;
	(void) _fb;
	(void) _resolver;
	{
		auto _e = _fb->events();
		if (_e) {
			_o->events.resize(_e->size());
			for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) {
				_o->events[_i] = *_e->Get(_i);
			}
		}
	};
}

inline flatbuffers::Offset<PolarityPacket> PolarityPacket::Pack(flatbuffers::FlatBufferBuilder &_fbb,
	const PolarityPacketT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
	return CreatePolarityPacket(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PolarityPacket> CreatePolarityPacket(flatbuffers::FlatBufferBuilder &_fbb,
	const PolarityPacketT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
	(void) _rehasher;
	(void) _o;
	struct _VectorArgs {
		flatbuffers::FlatBufferBuilder *__fbb;
		const PolarityPacketT *__o;
		const flatbuffers::rehasher_function_t *__rehasher;
	} _va = {&_fbb, _o, _rehasher};
	(void) _va;
	auto _events = _o->events.size() ? _fbb.CreateVectorOfStructs(_o->events.data(), _o->events.size()) : 0;
	return dv::CreatePolarityPacket(_fbb, _events);
}

inline const flatbuffers::TypeTable *PolarityEventTypeTable() {
	static const flatbuffers::TypeCode type_codes[] = {{flatbuffers::ET_LONG, 0, -1}, {flatbuffers::ET_SHORT, 0, -1},
		{flatbuffers::ET_SHORT, 0, -1}, {flatbuffers::ET_BOOL, 0, -1}};
	static const int64_t values[]                   = {0, 8, 10, 12, 16};
	static const char *const names[]                = {"timestamp", "addressX", "addressY", "polarity"};
	static const flatbuffers::TypeTable tt          = {flatbuffers::ST_STRUCT, 4, type_codes, nullptr, values, names};
	return &tt;
}

inline const flatbuffers::TypeTable *PolarityPacketTypeTable() {
	static const flatbuffers::TypeCode type_codes[]    = {{flatbuffers::ET_SEQUENCE, 1, 0}};
	static const flatbuffers::TypeFunction type_refs[] = {PolarityEventTypeTable};
	static const char *const names[]                   = {"events"};
	static const flatbuffers::TypeTable tt = {flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names};
	return &tt;
}

inline const dv::PolarityPacket *GetPolarityPacket(const void *buf) {
	return flatbuffers::GetRoot<dv::PolarityPacket>(buf);
}

inline const dv::PolarityPacket *GetSizePrefixedPolarityPacket(const void *buf) {
	return flatbuffers::GetSizePrefixedRoot<dv::PolarityPacket>(buf);
}

inline const char *PolarityPacketIdentifier() {
	return "POLA";
}

const char *PolarityPacket::identifier = PolarityPacketIdentifier();

inline bool PolarityPacketBufferHasIdentifier(const void *buf) {
	return flatbuffers::BufferHasIdentifier(buf, PolarityPacketIdentifier());
}

inline bool VerifyPolarityPacketBuffer(flatbuffers::Verifier &verifier) {
	return verifier.VerifyBuffer<dv::PolarityPacket>(PolarityPacketIdentifier());
}

inline bool VerifySizePrefixedPolarityPacketBuffer(flatbuffers::Verifier &verifier) {
	return verifier.VerifySizePrefixedBuffer<dv::PolarityPacket>(PolarityPacketIdentifier());
}

inline void FinishPolarityPacketBuffer(
	flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dv::PolarityPacket> root) {
	fbb.Finish(root, PolarityPacketIdentifier());
}

inline void FinishSizePrefixedPolarityPacketBuffer(
	flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dv::PolarityPacket> root) {
	fbb.FinishSizePrefixed(root, PolarityPacketIdentifier());
}

inline std::unique_ptr<PolarityPacketT> UnPackPolarityPacket(
	const void *buf, const flatbuffers::resolver_function_t *res = nullptr) {
	return std::unique_ptr<PolarityPacketT>(GetPolarityPacket(buf)->UnPack(res));
}

} // namespace dv

#endif // FLATBUFFERS_GENERATED_POLARITY_DV_H_
