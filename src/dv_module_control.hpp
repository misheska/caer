// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DVMODULECONTROL_DV_H_
#define FLATBUFFERS_GENERATED_DVMODULECONTROL_DV_H_

#include "dv-sdk/data/flatbuffers/flatbuffers.h"

namespace dv {

struct ModuleControl;
struct ModuleControlT;

bool operator==(const ModuleControlT &lhs, const ModuleControlT &rhs);

inline const flatbuffers::TypeTable *ModuleControlTypeTable();

enum class ModuleCommand : int8_t { START = 0, SHUTDOWN = 1, RESTART = 2, TS_RESET = 3, MIN = START, MAX = TS_RESET };

inline const ModuleCommand (&EnumValuesModuleCommand())[4] {
	static const ModuleCommand values[]
		= {ModuleCommand::START, ModuleCommand::SHUTDOWN, ModuleCommand::RESTART, ModuleCommand::TS_RESET};
	return values;
}

inline const char *const *EnumNamesModuleCommand() {
	static const char *const names[] = {"START", "SHUTDOWN", "RESTART", "TS_RESET", nullptr};
	return names;
}

inline const char *EnumNameModuleCommand(ModuleCommand e) {
	if (e < ModuleCommand::START || e > ModuleCommand::TS_RESET)
		return "";
	const size_t index = static_cast<int>(e);
	return EnumNamesModuleCommand()[index];
}

struct ModuleControlT : public flatbuffers::NativeTable {
	typedef ModuleControl TableType;
	static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
		return "dv.ModuleControlT";
	}
	ModuleCommand cmd;
	uint64_t id;
	ModuleControlT() : cmd(ModuleCommand::START), id(0) {
	}
};

inline bool operator==(const ModuleControlT &lhs, const ModuleControlT &rhs) {
	return (lhs.cmd == rhs.cmd) && (lhs.id == rhs.id);
}

struct ModuleControl FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
	typedef ModuleControlT NativeTableType;
	static FLATBUFFERS_CONSTEXPR const char *identifier = "MCTR";
	static const flatbuffers::TypeTable *MiniReflectTypeTable() {
		return ModuleControlTypeTable();
	}
	static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
		return "dv.ModuleControl";
	}
	enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE { VT_CMD = 4, VT_ID = 6 };
	ModuleCommand cmd() const {
		return static_cast<ModuleCommand>(GetField<int8_t>(VT_CMD, 0));
	}
	uint64_t id() const {
		return GetField<uint64_t>(VT_ID, 0);
	}
	bool Verify(flatbuffers::Verifier &verifier) const {
		return VerifyTableStart(verifier) && VerifyField<int8_t>(verifier, VT_CMD)
			   && VerifyField<uint64_t>(verifier, VT_ID) && verifier.EndTable();
	}
	ModuleControlT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
	void UnPackTo(ModuleControlT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
	static void UnPackToFrom(
		ModuleControlT *_o, const ModuleControl *_fb, const flatbuffers::resolver_function_t *_resolver = nullptr);
	static flatbuffers::Offset<ModuleControl> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ModuleControlT *_o,
		const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ModuleControlBuilder {
	flatbuffers::FlatBufferBuilder &fbb_;
	flatbuffers::uoffset_t start_;
	void add_cmd(ModuleCommand cmd) {
		fbb_.AddElement<int8_t>(ModuleControl::VT_CMD, static_cast<int8_t>(cmd), 0);
	}
	void add_id(uint64_t id) {
		fbb_.AddElement<uint64_t>(ModuleControl::VT_ID, id, 0);
	}
	explicit ModuleControlBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
		start_ = fbb_.StartTable();
	}
	ModuleControlBuilder &operator=(const ModuleControlBuilder &);
	flatbuffers::Offset<ModuleControl> Finish() {
		const auto end = fbb_.EndTable(start_);
		auto o         = flatbuffers::Offset<ModuleControl>(end);
		return o;
	}
};

inline flatbuffers::Offset<ModuleControl> CreateModuleControl(
	flatbuffers::FlatBufferBuilder &_fbb, ModuleCommand cmd = ModuleCommand::START, uint64_t id = 0) {
	ModuleControlBuilder builder_(_fbb);
	builder_.add_id(id);
	builder_.add_cmd(cmd);
	return builder_.Finish();
}

flatbuffers::Offset<ModuleControl> CreateModuleControl(flatbuffers::FlatBufferBuilder &_fbb, const ModuleControlT *_o,
	const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ModuleControlT *ModuleControl::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
	auto _o = new ModuleControlT();
	UnPackTo(_o, _resolver);
	return _o;
}

inline void ModuleControl::UnPackTo(ModuleControlT *_o, const flatbuffers::resolver_function_t *_resolver) const {
	(void) _o;
	(void) _resolver;
	UnPackToFrom(_o, this, _resolver);
}

inline void ModuleControl::UnPackToFrom(
	ModuleControlT *_o, const ModuleControl *_fb, const flatbuffers::resolver_function_t *_resolver) {
	(void) _o;
	(void) _fb;
	(void) _resolver;
	{
		auto _e = _fb->cmd();
		_o->cmd = _e;
	};
	{
		auto _e = _fb->id();
		_o->id  = _e;
	};
}

inline flatbuffers::Offset<ModuleControl> ModuleControl::Pack(
	flatbuffers::FlatBufferBuilder &_fbb, const ModuleControlT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
	return CreateModuleControl(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ModuleControl> CreateModuleControl(
	flatbuffers::FlatBufferBuilder &_fbb, const ModuleControlT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
	(void) _rehasher;
	(void) _o;
	struct _VectorArgs {
		flatbuffers::FlatBufferBuilder *__fbb;
		const ModuleControlT *__o;
		const flatbuffers::rehasher_function_t *__rehasher;
	} _va = {&_fbb, _o, _rehasher};
	(void) _va;
	auto _cmd = _o->cmd;
	auto _id  = _o->id;
	return dv::CreateModuleControl(_fbb, _cmd, _id);
}

inline const flatbuffers::TypeTable *ModuleCommandTypeTable() {
	static const flatbuffers::TypeCode type_codes[]    = {{flatbuffers::ET_CHAR, 0, 0}, {flatbuffers::ET_CHAR, 0, 0},
        {flatbuffers::ET_CHAR, 0, 0}, {flatbuffers::ET_CHAR, 0, 0}};
	static const flatbuffers::TypeFunction type_refs[] = {ModuleCommandTypeTable};
	static const char *const names[]                   = {"START", "SHUTDOWN", "RESTART", "TS_RESET"};
	static const flatbuffers::TypeTable tt = {flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, names};
	return &tt;
}

inline const flatbuffers::TypeTable *ModuleControlTypeTable() {
	static const flatbuffers::TypeCode type_codes[]    = {{flatbuffers::ET_CHAR, 0, 0}, {flatbuffers::ET_ULONG, 0, -1}};
	static const flatbuffers::TypeFunction type_refs[] = {ModuleCommandTypeTable};
	static const char *const names[]                   = {"cmd", "id"};
	static const flatbuffers::TypeTable tt = {flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, names};
	return &tt;
}

inline const dv::ModuleControl *GetModuleControl(const void *buf) {
	return flatbuffers::GetRoot<dv::ModuleControl>(buf);
}

inline const dv::ModuleControl *GetSizePrefixedModuleControl(const void *buf) {
	return flatbuffers::GetSizePrefixedRoot<dv::ModuleControl>(buf);
}

inline const char *ModuleControlIdentifier() {
	return "MCTR";
}

inline bool ModuleControlBufferHasIdentifier(const void *buf) {
	return flatbuffers::BufferHasIdentifier(buf, ModuleControlIdentifier());
}

inline bool VerifyModuleControlBuffer(flatbuffers::Verifier &verifier) {
	return verifier.VerifyBuffer<dv::ModuleControl>(ModuleControlIdentifier());
}

inline bool VerifySizePrefixedModuleControlBuffer(flatbuffers::Verifier &verifier) {
	return verifier.VerifySizePrefixedBuffer<dv::ModuleControl>(ModuleControlIdentifier());
}

inline void FinishModuleControlBuffer(
	flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dv::ModuleControl> root) {
	fbb.Finish(root, ModuleControlIdentifier());
}

inline void FinishSizePrefixedModuleControlBuffer(
	flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<dv::ModuleControl> root) {
	fbb.FinishSizePrefixed(root, ModuleControlIdentifier());
}

inline std::unique_ptr<ModuleControlT> UnPackModuleControl(
	const void *buf, const flatbuffers::resolver_function_t *res = nullptr) {
	return std::unique_ptr<ModuleControlT>(GetModuleControl(buf)->UnPack(res));
}

} // namespace dv

#endif // FLATBUFFERS_GENERATED_DVMODULECONTROL_DV_H_
